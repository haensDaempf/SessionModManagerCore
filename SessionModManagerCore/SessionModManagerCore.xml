<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SessionModManagerCore</name>
    </assembly>
    <members>
        <member name="T:SessionModManagerCore.Classes.Asset">
            <summary>
            Class containing an Asset object
            </summary>
        </member>
        <member name="P:SessionModManagerCore.Classes.Asset.ID">
            <summary>
            A unique string to identify assets
            </summary>
        </member>
        <member name="P:SessionModManagerCore.Classes.Asset.Name">
            <summary>
            The display name of the asset
            </summary>
        </member>
        <member name="P:SessionModManagerCore.Classes.Asset.Description">
            <summary>
            A short description of the asset
            </summary>
        </member>
        <member name="P:SessionModManagerCore.Classes.Asset.Author">
            <summary>
            The author of the asset
            </summary>
        </member>
        <member name="P:SessionModManagerCore.Classes.Asset.DownloadLink">
            <summary>
            The url to download in format smm://GDrive//googledriveID
            </summary>
        </member>
        <member name="P:SessionModManagerCore.Classes.Asset.PreviewImage">
            <summary>
            The url to preview image
            </summary>
        </member>
        <member name="P:SessionModManagerCore.Classes.Asset.Category">
            <summary>
            The category of the asset as a string
            </summary>
        </member>
        <member name="P:SessionModManagerCore.Classes.Asset.UpdatedDate">
            <summary>
            The date (UTC) the asset was last uploaded/edited.
            </summary>
        </member>
        <member name="M:SessionModManagerCore.Classes.Asset.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SessionModManagerCore.Classes.Asset.ToString">
            <summary>
            Dumps a json string of the asset
            </summary>
            <returns>JSON string</returns>
        </member>
        <member name="M:SessionModManagerCore.Classes.Asset.HasChanges(SessionModManagerCore.Classes.Asset)">
            <summary>
            Compares properties to another asset to see if 
            name, description, category, author, or link is different.
            </summary>
            <param name="other"></param>
            <returns> true if properties are different; false if they are equal. </returns>
        </member>
        <member name="T:SessionModManagerCore.Classes.AssetCategory">
            <summary>
            Class to replace an enum to get string values.
            </summary>
        </member>
        <member name="M:SessionModManagerCore.Classes.AssetCategory.FromString(System.String)">
            <summary>
            Converts a string to an AssetCategory
            </summary>
            <param name="category">Name of the category</param>
            <returns>AssetCategory object</returns>
        </member>
        <member name="M:SessionModManagerCore.Classes.AssetCatalog.TryParseDownloadUrl(System.String,SessionModManagerCore.Classes.DownloadLocationType@,System.String@)">
            <summary>
            Parses download url information (either http url or google drive) from a rsmm:// download url
            </summary>
            <param name="link"></param>
            <param name="type"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:SessionModManagerCore.Classes.AssetCatalog.FormatUrl(System.String)">
            <summary>
            Formats a http url into the appropriate rsmm:// url format
            </summary>
        </member>
        <member name="M:SessionModManagerCore.Classes.CatalogSettings.AddDefaults(SessionModManagerCore.Classes.CatalogSettings)">
            <summary>
            Ensures all default catalog urls are in the users catalog settings
            </summary>
        </member>
        <member name="P:SessionModManagerCore.Classes.MapMetaData.OriginalImportPath">
            <summary>
            path to folder that was imported into Content.
            Used for Re-import feature
            </summary>
        </member>
        <member name="P:SessionModManagerCore.Classes.MapMetaData.MapFileDirectory">
            <summary>
            Path to directory where .umap file exists
            </summary>
        </member>
        <member name="P:SessionModManagerCore.Classes.MapMetaData.FilePaths">
            <summary>
            List of absolute paths to files that were imported for the map
            </summary>
        </member>
        <member name="M:SessionModManagerCore.Classes.MapMetaData.GetJsonFileName">
            <summary>
            Returns the name of the json file that this meta data is saved as
            </summary>
            <returns></returns>
        </member>
        <member name="P:SessionModManagerCore.Classes.TextureMetaData.FilePaths">
            <summary>
            List of absolute paths to files that were copied for the texture
            </summary>
        </member>
        <member name="P:SessionModManagerCore.Classes.TextureMetaData.AssetName">
            <summary>
            Name of the asset file that this texture file came from
            </summary>
        </member>
        <member name="P:SessionModManagerCore.Classes.TextureMetaData.Name">
            <summary>
            Display name of the asset from the asset store
            </summary>
        </member>
        <member name="T:SessionModManagerCore.Classes.VersionChecker">
            <summary>
            Used to check if a new version of Session Mod Manager is available to download
            and handles the app updating process.
            </summary>
        </member>
        <member name="P:SessionModManagerCore.Classes.VersionChecker.UpdaterInstance">
            <summary>
            Static instance of <see cref="F:SessionModManagerCore.Classes.VersionChecker._updater"/>.
            Gets initialized if null.
            </summary>
        </member>
        <member name="F:SessionModManagerCore.Classes.VersionChecker.IsNewVersionAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="M:SessionModManagerCore.Classes.VersionChecker.IsUpdateAvailable">
            <summary>
            If <see cref="F:SessionModManagerCore.Classes.VersionChecker.IsNewVersionAvailable"/> is null then makes request to ag_files.json url to check if there is an update available and sets <see cref="F:SessionModManagerCore.Classes.VersionChecker.IsNewVersionAvailable"/>.
            Returns <see cref="F:SessionModManagerCore.Classes.VersionChecker.IsNewVersionAvailable"/>.
            </summary>
            <returns> Returns true if an update is available. </returns>
        </member>
        <member name="M:SessionModManagerCore.Classes.VersionChecker.UpdateApplication">
            <summary>
            Runs avantgarde updater which will exit the application to run a seperate console app that downloads
            and copies the latest files.
            </summary>
        </member>
        <member name="F:SessionModManagerCore.Classes.VersionChecker._filesToDelete">
            <summary>
            List of files that are used in version older than 2.2.0.0
            These will be deleted if they exist in the app directory
            </summary>
        </member>
        <member name="M:SessionModManagerCore.Classes.VersionChecker.DeleteOldVersionFiles">
            <summary>
            Delete files used in versions older than 2.2.0.0
            </summary>
        </member>
        <member name="M:SessionModManagerCore.ViewModels.ManageTexturesViewModel.InitInstalledTextures">
            <summary>
            Reads installed_textures.json meta data and initializes <see cref="P:SessionModManagerCore.ViewModels.ManageTexturesViewModel.InstalledTextures"/> with results
            </summary>
        </member>
        <member name="T:SessionMapSwitcherCore.Classes.BoolWithMessage">
            <summary>
            Used to return true or false and a string like an exception message.
            </summary>
        </member>
        <member name="T:SessionMapSwitcherCore.Classes.EzPzMapSwitcher">
            <summary>
            Class to handle loading maps for EzPz patched games.
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.EzPzMapSwitcher.DeleteMapFilesFromNYCFolder">
            <summary>
            Deletes all files in the Content/Art/Env/NYC folder
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.EzPzMapSwitcher.GetGameDefaultMapSetting">
            <summary>
            Checks .ini file for the map that will load on game start
            </summary>
        </member>
        <member name="T:SessionMapSwitcherCore.Classes.EzPzPatcher">
            <summary>
            Class to provide methods for patching the game with dga's EzPz Mod.
            </summary>
        </member>
        <member name="F:SessionMapSwitcherCore.Classes.EzPzPatcher.DownloadedZipFileName">
            <summary>
            Name of zip file downloaded with unrealpak.exe files
            </summary>
        </member>
        <member name="F:SessionMapSwitcherCore.Classes.EzPzPatcher.DownloadedPatchFileName">
            <summary>
            Name of zip file with EzPz patcher exe
            </summary>
        </member>
        <member name="F:SessionMapSwitcherCore.Classes.EzPzPatcher.EzPzGitHubUrl">
            <summary>
            Github link to .txt file that contains the latest download link to the files required for patching
            </summary>
        </member>
        <member name="F:SessionMapSwitcherCore.Classes.EzPzPatcher.UnpackGitHubUrl">
            <summary>
            Github link to .txt file that contains the latest download link to the files required for unpacking
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.EzPzPatcher.StartPatchingAsync(System.String)">
            <summary>
            Handles the entire patching process
            ... download zip files
            ... extract zip files
            ... run UnrealPak.exe and EzPz
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.EzPzPatcher.ExtractGameFilesFromPak">
            <summary>
            Uses UnrealPak.exe to extract the files: PBP_ObjectPlacementInventory.uexp and DefaultGame.ini
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.EzPzPatcher.DeleteDownloadedFilesInPakFolder">
            <summary>
            Deletes all downloaded files in Paks folder except for 'SessionGame-WindowsNoEditor' files
            and the EzPzMod.exe 
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.EzPzPatcher.IsEzPzExeDownloaded">
            <summary>
            Returns true if EzPz .exe is in Paks folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.EzPzPatcher.IsUnpackZipDownloaded">
            <summary>
            Returns true if SessionUnpack.zip is in Paks folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.EzPzPatcher.DownloadEzPzModZip">
            <summary>
            Download EzPz .zip to Paks folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.EzPzPatcher.DownloadUnrealPackZip">
            <summary>
            Download SessionUnpack .zip to Paks folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.EzPzPatcher.IsGamePatched">
            <summary>
            Checks if EzPz has been ran by looking for the UserEngine.ini file
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.GameSettingsManager.ValidateAndUpdateObjectCount(System.String)">
            <summary>
            validates the object count and then writes to the correct file to update object count.
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.GameSettingsManager.GetObjectCountFromFile">
            <summary>
            Get the Object Placement count from the file (only reads the first address) and set <see cref="P:SessionMapSwitcherCore.Classes.GameSettingsManager.ObjectCount"/>
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.GameSettingsManager.SetObjectCountInFile(System.String)">
            <summary>
            Updates the PBP_ObjectPlacementInventory.uexp file with the new object count value (every placeable object is updated with new count).
            This works by converting <paramref name="objectCountText"/> to bytes and writing the bytes to specific addresses in the file.
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.GameSettingsManager.RenameMoviesFolderToSkipMovies(System.Boolean)">
            <summary>
            If skipping movies then renames 'Movies' folder to 'Movies_SKIP'.
            If not skipping then renames folder to 'Movies'
            </summary>
        </member>
        <member name="T:SessionMapSwitcherCore.Classes.Interfaces.IMapSwitcher">
            <summary>
            Interface to represent a map switcher for EzPz and Unpacked versions of the game
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.MetaDataManager.WriteCustomMapPropertiesToFile(System.Collections.Generic.IEnumerable{MapListItem})">
            <summary>
            Loops over maps and updates meta .json files with new custom properties
            </summary>
            <returns> true if files updated; false if exception thrown </returns>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.MetaDataManager.SetCustomPropertiesForMaps(System.Collections.Generic.IEnumerable{MapListItem},System.Boolean)">
            <summary>
            Loops over each map and gets the custom properties from their respective meta .json file
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.MetaDataManager.SetCustomPropertiesForMap(MapListItem,System.Boolean)">
            <summary>
            Gets the meta .json for the map if it exists and updates
            the custom name and IsHiddenByUser property
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.MetaDataManager.WriteCustomMapPropertiesToFile(MapListItem)">
            <summary>
            Updates the meta .json files for the maps with the new
            custom names and if it is hidden.
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.MetaDataManager.CreateMetaDataFolder">
            <summary>
            Creates folder to Meta data folder if it does not exists
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.MetaDataManager.ReplaceSourceMapPathWithPathToContent(System.String,System.String)">
            <summary>
            Returns a new absolute file path replacing <paramref name="sourceMapFolder"/> with <see cref="P:SessionMapSwitcherCore.Classes.SessionPath.ToContent"/>
            </summary>
            <param name="sourceMapFolder"> path to replace with <see cref="P:SessionMapSwitcherCore.Classes.SessionPath.ToContent"/>. </param>
            <param name="absoluteFilePath"> path to file that is in the <paramref name="sourceMapFolder"/>. </param>
        </member>
        <member name="P:SessionMapSwitcherCore.Classes.SessionPath.ToNYCFolder">
            <summary>
            Returns absolute path to the NYC folder in Session game directory. Requires <see cref="T:SessionMapSwitcherCore.Classes.SessionPath"/>.
            </summary>
        </member>
        <member name="T:SessionMapSwitcherCore.Classes.UnpackedMapSwitcher">
            <summary>
            Class to handle loading maps for unpacked patched games.
            Also has helper methods for backing up original map files (for unpacked versions)
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Classes.UnpackedMapSwitcher.DeleteMapFilesFromNYCFolder">
            <summary>
            Deletes all files in the Content/Art/Env/NYC folder
            that does not have NYC_01 prefix (original game files).
            Also deletes NYC01_Persistent files
            </summary>
            <remarks>
            The NYC01_Persistent.umap file must be deleted so a custom map can be loaded when you leave the apartment in-game.
            If this file is not deleted then the game loads the default map when you leave the apartment.
            </remarks>
        </member>
        <member name="M:SessionMapSwitcherCore.Utils.DownloadUtils.GetTextResponseFromUrl(System.String,System.Int32)">
            <summary>
            Make a request to the given url and return the response as a string.
            Used for getting .txt documents from github.
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Utils.DownloadUtils.GetDirectDownloadLinkFromAnonPage(System.String)">
            <summary>
            Make request to anonfile download page and scrape direct download url from it.
            Will throw an exception if http request fails
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Utils.DownloadUtils.FindDirectDownloadUrlInHtml(System.String)">
            <summary>
            Scrapes the anonfile html for the direct download link of a file
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Utils.DownloadUtils.DownloadFileToFolderAsync(System.String,System.String,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Downloads a file from a given URL and saves it to the given path.
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Utils.FileUtils.ExtractZipFile(System.String,System.String)">
            <summary>
            Extract a zip file to a given path. Returns true on success.
            </summary>
        </member>
        <member name="F:SessionMapSwitcherCore.Utils.UnpackUtils.DownloadedZipFileName">
            <summary>
            Name of zip file downloaded
            </summary>
        </member>
        <member name="F:SessionMapSwitcherCore.Utils.UnpackUtils.GitHubUrl">
            <summary>
            Github link to .txt file that contains the latest download link to the files required for unpacking
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Utils.UnpackUtils.StartUnpackingAsync(System.String)">
            <summary>
            Handles the entire unpacking process
            ... download zip file
            ... extract zip file
            ... run UnrealPak.exe
            ... copy unpacked files to Session folder
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Utils.UnpackUtils.IsSessionUnpacked">
            <summary>
            Determines if Session is properly unpacked by checking for specific directories
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Utils.UnpackUtils.IsSessionPakFileRenamed">
            <summary>
            Determines if the file extension for SessionGame-WindowsNoEditor.pak was changed to .bak
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.Utils.UnpackUtils.RenamePakFile">
            <summary>
            Renames the file SessionGame-WindowsNoEditor.pak to SessionGame-WindowsNoEditor.bak
            </summary>
            <returns> true if file was renamed; false otherwise. </returns>
        </member>
        <member name="P:SessionMapSwitcherCore.ViewModels.AssetStoreViewModel.HasDownloadedMap">
            <summary>
            used to determine if list of available maps should be refreshed when switching back to the main window
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.ViewModels.AssetStoreViewModel.RefreshAuthorList">
            <summary>
            Updates <see cref="P:SessionMapSwitcherCore.ViewModels.AssetStoreViewModel.AuthorList"/> with distinct sorted list of authors in <see cref="P:SessionMapSwitcherCore.ViewModels.AssetStoreViewModel.AllAssets"/>
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.ViewModels.AssetStoreViewModel.GetAssetsByCategory(SessionModManagerCore.Classes.AssetCategory)">
            <summary>
            Returns list of AssetViewModels by category that exist in <see cref="P:SessionMapSwitcherCore.ViewModels.AssetStoreViewModel.AllAssets"/>
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.ViewModels.AssetStoreViewModel.GetSelectedCategories">
            <summary>
            Returns list of <see cref="T:SessionModManagerCore.Classes.AssetCategory"/> that are set to true to display
            by checking <see cref="P:SessionMapSwitcherCore.ViewModels.AssetStoreViewModel.DisplayDecks"/>, <see cref="P:SessionMapSwitcherCore.ViewModels.AssetStoreViewModel.DisplayGriptapes"/>, etc.
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.ViewModels.AssetStoreViewModel.DownloadSelectedAssetAsync">
            <summary>
            Main method for downloading and installing the selected asset asynchronously.
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.ViewModels.AssetStoreViewModel.InstallDownloadedAsset(SessionModManagerCore.ViewModels.AssetViewModel,System.String)">
            <summary>
            Logic for determining how to install downloaded asset. (maps and textures are installed differently)
            </summary>
            <param name="assetToInstall"> asset being installed </param>
            <param name="pathToDownload"> absolute path to the downloaded asset file </param>
        </member>
        <member name="M:SessionMapSwitcherCore.ViewModels.AssetStoreViewModel.RemoveSelectedAsset">
            <summary>
            Deletes the selected asset files from Session folders
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.ViewModels.ComputerImportViewModel.EnsurePathToMapFilesIsCorrect(System.String)">
            <summary>
            This will check if the folder path to a map has the 'Content' folder and returns path to the maps 'Content folder if so
            </summary>
            <returns>
            "pathToMapFiles/Content" if Content folder exists; otherwise original pathToMapFiles string is returned
            </returns>
        </member>
        <member name="M:SessionMapSwitcherCore.ViewModels.MainWindowViewModel.Filter(MapListItem)">
            <summary>
            Filter to hide maps when invalid and the option is unchecked
            </summary>
        </member>
        <member name="P:SessionMapSwitcherCore.ViewModels.MainWindowViewModel.InputControlsEnabled">
            <summary>
            Determine if all controls (buttons, textboxes) should be enabled or disabled in main window.
            </summary>
        </member>
        <member name="P:SessionMapSwitcherCore.ViewModels.MainWindowViewModel.SecondMapToLoad">
            <summary>
            Map to load after starting the game in <see cref="M:SessionMapSwitcherCore.ViewModels.MainWindowViewModel.StartGameAndLoadSecondMap"/>
            If null then the currently loaded map will be used.
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.ViewModels.MainWindowViewModel.SetSessionPath(System.String)">
            <summary>
            Sets <see cref="P:SessionMapSwitcherCore.Classes.SessionPath.ToSession"/> and saves the value to appSettings in the applications .config file
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.ViewModels.MainWindowViewModel.AddDefaultMapToAvailableMaps">
            <summary>
            adds the default session map to beginning of list of <see cref="P:SessionMapSwitcherCore.ViewModels.MainWindowViewModel.AvailableMaps"/>
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.ViewModels.TextureReplacerViewModel.CopyOtherSubfoldersInTempDir(System.Collections.Generic.List{System.String})">
            <summary>
            Copies other folders (not stock game folders) from unzipped temp folder into games Content folder
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.ViewModels.TextureReplacerViewModel.TriggerPropertyChanged">
            <summary>
            Enable or disable the 'Replace' button based on the game being patched/unpacked
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.ViewModels.TextureReplacerViewModel.UnzippedTempFolderHasOtherFolders">
            <summary>
            Return true if unzipped temp folder has subfolders other than the games stock folders e.g. 'Customization' folder
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.ViewModels.TextureReplacerViewModel.CopyNewTextureFilesToGame(System.IO.FileInfo,System.String)">
            <summary>
            Loop over all files in the folder that contains the <paramref name="newTexture"/> .uasset file and copy all other files related to texture (.uexp and .ubulk files) to the <paramref name="targetFolder"/>
            </summary>
        </member>
        <member name="M:SessionMapSwitcherCore.ViewModels.TextureReplacerViewModel.DeleteCurrentTextureFiles(System.String,System.String)">
            <summary>
            Delete files in <paramref name="targetFolder"/> that contain the string <paramref name="textureFileName"/>
            </summary>
            <param name="textureFileName"> name of texture to delete (without file extension) </param>
            <param name="targetFolder"> folder to search in </param>
        </member>
        <member name="F:SessionMapSwitcherCore.ViewModels.UpdateViewModel.LatestReleaseUrl">
            <summary>
            url to the latest github release of the application
            </summary>
        </member>
        <member name="P:DownloadableMap.ZipFileName">
            <summary>
            Name of zip file that will be downloaded for this map with the '.zip' extension
            (same as MapName with spaces replaced with '_')
            </summary>
        </member>
        <member name="P:MapListItem.FullPath">
            <summary>
            Absolute path to the .umap file
            </summary>
        </member>
        <member name="P:MapListItem.DirectoryPath">
            <summary>
            Path to directory where all files related to this map are located.
            </summary>
        </member>
        <member name="P:MapListItem.MetaData">
            <summary>
            Returns a string of the DirectoryPath, MapName, and other custom properties seperated by '|'
            Used to write to meta data file.
            </summary>
        </member>
        <member name="M:MapListItem.HasGameMode(System.String)">
            <summary>
            Reads the file and looks for the string '/Game/Data/PBP_InGameSessionGameMode'
            </summary>
            <param name="fullPath"> full path to file </param>
        </member>
    </members>
</doc>
